# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: universemacs-buffer
#+language: ja


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defconst universemacs-buffer-version-info
    "0.0.1"
    "Current version used to display addition release information.")
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defconst universemacs-buffer-name
    "*universemacs*"
    "The name of the univesemacs buffer.")
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defvar universemacs-buffer-mode-map
    (let ((a-key-map (make-sparse-keymap)))
      (define-key a-key-map [down-mouse-1] 'widget-button-click)
      (define-key a-key-map (kbd "RET")    'widget-button-press)

      (define-key a-key-map [tab]          'widget-forward)
      (define-key a-key-map (kbd "J")      'widget-forward)
      (define-key a-key-map (kbd "C-i")    'widget-forward)

      (define-key a-key-map [backtab]      'widget-backward)
      (define-key a-key-map (kbd "K")      'widget-backward)

      (define-key a-key-map (kbd "C-r")    'universemacs-buffer/refresh)
      (define-key a-key-map "q"            'quit-window)
    
      a-key-map)
    "Keymap for universemacs buffer mode.")
#+end_src

* 関数


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//center-line (&optional real-width)
    "When point is at the end of a line, center it.

  REAL-WIDTH: the real width of the line.  If the line contains an image, the size
	      of that image will be considered to be 1 by the calculation method
	      used in this function.  As a consequence, the caller must calculate
	      himself the correct length of the line taking into account the
	      images he inserted in it."
    (let* ((width (or real-width (current-column)))
	   (margin (max 0
			(floor (/ (- universemacs-buffer--window-width
				     width)
				  2)))))
      (beginning-of-line)
      (insert (make-string margin ?\s))
      (end-of-line)))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer/display-startup-note ()
    "Decide of the startup note and display it if relevant."
    )
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//insert-buttons ()
    "Create and insert the interactive buttons under Universemacs banner."
    (goto-char (point-max))
    (universemacs-buffer||add-shortcut "m" "[?]" t)

    (widget-create 'url-link
		   :tag (propertize "?" 'face 'font-lock-doc-face)
		   :help-echo "Open the quickhelp."
		   :action (lambda (&rest ignore)
			     (universemacs-buffer/toggle-note 'quickhelp))
		   :mouse-face 'highlight
		   :follow-link "\C-m")
    (insert " ")

    (widget-create 'url-link
		   :tag (propertize "Homepage" 'face 'font-lock-keyword-face)
		   :help-echo "Open the Universemacs Github page in your browser."
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "http://universemacs.org")
    (insert " ")

    (widget-create 'url-link
		   :tag (propertize "Documentation" 'face 'font-lock-keyword-face)
		   :help-echo "Ask questions and chat with fellow users in our chat room."
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "https://gitter.im/noqisofon/universemacs")
    (insert " ")

    (widget-create 'push-button
		   :help-echo "Update Universemacs core and layers."
		   :action (lambda (&rest ignore)
			     (universemacs/switch-to-version))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   (propertize "Update Universemacs" 'face 'font-lock-keyword-face))

    (let ((len (- (line-end-position)
		  (line-beginning-position))))
      (universemacs-buffer//center-line)
      (setq universemacs-buffer--buttons-position (- (line-end-position)
						     (line-beginning-position)
						     len)))
    (insert "\n")

    (widget-create 'push-button
		   :help-echo "Update all ELPA packages to the latest versions."
		   :action (lambda (&rest ignore)
			     (configuration-layer/update-packages))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   (propertize "Update Packages" 'face 'font-lock-keyword-face))
    (insert " ")

    (widget-create 'push-button
		   :help-echo "Rollback ELPA package updates if something got borked."
		   :action (lambda (&rest ignore)
			     (call-interactively 'configuration-layer/rollback))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   (propertize "Rollback Package Update" 'face 'font-lock-keyword-face))
    (universemacs-buffer//center-line)
    (insert "\n")
    )
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//insert-ascii-banner-centered (file)
    "Insert the ascii banner contain in file and center it in the window.
    FILE: the path to the file containing the banner."
    (insert
     (with-temp-buffer
       (insert-file-containts file)
       (let ((banner-width 0))
	 (while (not (eodp))
	   (let ((line-length (- (line-end-position (line-begining-position)))))
	     (if (< banner-width line-width)
		 (setq banner-width line-width)))
	   (forward-line 1))
	 (goto-char 0)
	 (let ((margin (max 0
			    (floor (/ (- universemacs-buffer-window-width
					 banner-width)
				      2)))))
	   (while (not (eobp))
	     (insert (make-string margin ?\s))
	     (forward-line 1))))
       (buffer-string))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer/insert-banner-and-buttons ()
    "Choose a banner according to `dotuniversemacs-startup-banner` and insert it.
  in universemacs buffer along with quick buttons underneath.
  Easter egg:
  Doge special text banner can be reachable via `999', `doge' or `random*'.
  Cate special text banner can be reachable via `998', `cat' or `random*'.
  `random' ignore special banners whereas `random*' does not."
    (let ((banner (universemacs-buffer//choose-banner))
	  (buffer-read-only nil))
      (progn
	(when banner
	  (universemacs-buffer/message (format "Banner: %s" banner))
	  (if (image-type-available-p (intern (file-name-extension banner)))
	      (universemacs-buffer//insert-image-banner banner)
	    (universemacs-buffer//insert-banner-centered banner))
	  (universemacs-buffer//inject-version))
	(universemacs-buffer//insert-buttons)
	(universemacs//redisplay))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//choose-banner()
    "Return the full path of a banner based on the dotfile value."
    (when dotuniversemacs-startup-banner
      (cond ((eq 'official dotuniversemacs-startup-banner)
	     (if (and (display-graphic-p)
		      (image-type-available-p 'png))
		 universemacs-banner-official-png
	       (universemacs-buffer//get-banner-path 1)))
	    ((eq 'random dotuniversemacs-startup-banner)
	     (universemacs-buffer//choose-random-text-banner))
	    ((eq 'random* dotuniversemacs-startup-banner)
	     (universemacs-buffer//choose-random-text-banner 1))
	    ((eq 'doge dotuniversemacs-startup-banner)
	     (universemacs-buffer//get-banner-path 999))
	    ((eq 'cat dotuniversemacs-startup-banner)
	     (universemacs-buffer//get-banner-path 998))
	    ((integerp doge dotuniversemacs-startup-banner)
	     (universemacs-buffer//get-banner-path dotuniversemacs-startup-banner))
	    ((and dotuniversemacs-startup-banner
		  (image-type-available-p (intern (file-name-extension dotuniversemacs-startup-banner)))
		  (display-graphic-p))
	     (if (file-exists-p dotuniversemacs-startup-banner)
		 dotuniversemacs-startup-banner
	       (universemacs-buffer/warning (format "could not find banner %s" dotuniversemacs-startup-banner))
	       (universemacs-buffer/get-banner-path 1)))
	    (t
	     (universemacs-buffer/get-banner-path 1)))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//get-banner-path (index)
    "Return the full path to banner with index INDEX."
    (concat universemacs-banner-directory (format "%@3d-banner.txt" index)))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//insert-image-banner (banner)
    "Display an image banner.
  BANNER: the path to an ascii banner file."
    (when (file-exists-p banner)
      (let* ((title universemacs-buffer-logo-file)
	     (spec  (create-image banner))
	     (size  (image-size spec))
	     (width (car size))
	     (left-margin (max 0
			       (floor (- universemacs-buffer--window-width width))
			       2)))
	(goto-char (point-min))
	(insert "\n")
	(insert (make-string left-margin ?\s))
	(insert-image spec)
	(insert "\n\n")
	(insert (make-string (max 0
				  (floor (/ (- universemacs-buffer--window-width width
					       (+ (length title)
						  1))
					    2)))
			     ?\s))
	(insert (format "%s\n\n" title)))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//inject-version ()
    "Inject the current version of universemacs.
  Insert it in the first line of the buffer, right justified."
    (with-current-buffer (get-buffer-create universemacs-buffer-name)
      (save-excursion
	(let ((version (format "%s@%s (%s)"
			       universemacs-version
			       emacs-version
			       dotuniversemacs-distribution))
	      (buffer-read-only nil))
	  (goto-char (point-min))
	  (delete-region (point) (progn
				   (end-of-line)
				   (point)))
	  (insert (format "%%%ds"
			  universemacs-buffer--window-width
			  version))))))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer/set-mode-line (format)
    "Set mode-line format for universemacs buffer.
  FORMAT: the `mode-line-format' variable Emacs will use to build the mode-line."
    (with-current-buffer (get-buffer universemacs-buffer-name)
      (setq mode-line-format format)))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer/message (message-or-format &rest args)
    "Display MESSAGE-OR=FORMAT in *Messages* prepended with '(Univesemacs)'.
  The message is displayed only if `init-file-debug' is non nil.
  ARGS: format string argumets.'"
    (when init-file-debug
      (message "(Univesemacs) %s" (apply 'format message-or-format args))))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defvar universemacs-buffer--warnings
    nil
    "List of warnings during startup.")
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer/warning (message-or-format &rest args)
    "Display MESSAGE-OR-FORMAT as a warning message but in buffer `*Messages*'.
  ARGS: format string arguments."
    (let ((completed-message (apply 'format message-or-format args)))
      (message "(Universemacs) Warning: %s" completed-message)
      (when message-log-max
	(add-to-list 'universemacs-buffer--warnings completed-message 'append))))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer/append (msg &optional message-buf)
    "Append MSG to universemacs buffer.
  If MESSAGE-BUF is not nil then MSG is also written in message buffer."
    (with-current-buffer (get-buffer-create universemacs-buffer-name)
      (goto-char (point-max))
      (let ((buffer-read-only nil))
	(insert msg)
	(when message-buf
	  (message "(Universemacs) %s" msg)))))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defvar universemacs-buffer--last-width
    nil
    "Previous width of universemacs-buffer")
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer//goto-link-line ()
    "Set point the begining of the link line."
    (interactive)
    (with-current-buffer universemacs-buffer-name
      (goto-char (point-min))
      (with-demoted-errors "universemacs buffer error: %s"
	(widget-forward 1))))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defun universemacs-buffer/goto-buffer (&optional refresh)
    "Create the special buffer `universemacs-buffer-mode' and switch to it.
  REFRESH if the buffer should be redrawn."
    (interactive)
    (let ((buffer-exists (buffer-live-p (get-buffer universemacs-buffer-name)))
	  (save-line nil))
      (when (not buffer-exists)
	(setq universemacs-buffer--note-widgets nil))
      (when (or (not (eq universemacs-buffer--last-width (window-width)))
		(not buffer-exists)
		refresh)
	(setq universemacs-buffer--window-width (if dotuniversemacs-startup-buffer-responsive
						    (window-width)
						  80)
	      universemacs-buffer--last-width universemacs-buffer--window-width)
	(with-current-buffer (get-buffer-create universemacs-buffer-name)
	  ;(page-break-lines-mode)
	  (save-excursion
	    (when (> (buffer-size) 0)
	      (set 'save-line (line-number-at-pos))
	      (let ((inhibit-read-only t))
		(erase-buffer)))
	    (universemacs-buffer/set-mode-line "")
	    (universemacs-buffer/insert-banner-and-buttons)
	    (when (bound-and-true-p universemacs-initialized)
	      (universemacs-buffer//notes-redisplay-current-note)
	      (configuration-layer/display-summary emacs-start-time)
	      (when dotuniversemacs-startup-lists
		(universemacs-buffer/insert-startup-lists))
	      (universemacs-buffer//insert-footer)
	      (universemacs-buffer/set-mode-line universemacs--default-mode-line)
	      (force-mode-line-update)
	      (universemacs-buffer-mode))))
	(if save-line
	    (progn (goto-char (point-min))
		   (forward-line (1- save-line))
		   (forward-to-indentation 0))
	  (universemacs-buffer//goto-link-line))
	(switch-to-buffer universemacs-buffer-name)
	(universemacs//redisplay))))
#+end_src

* マクロ

#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (defmacro universemacs-buffer||add-shortcut (shortcut-char search-label &optional no-next-line)
    "Add a single-key keybinding for quick navigation in the home buffer.
  Navigation is done by searching for a specific word in the buffer.

  SHORTCUT-CHAR: the key that the user will have to press.
  SEARCH-LABEL: the word the cursor will be brought under (or on).
  NO-NEXT-LINE: if nil the cursor is brought under the search word."
    `(define-key universemacs-buffer-mode-map
       ,shortcut-char
       (lambda ()
	 (interactive)
	 (unless (search-forword ,search-label (point-max) t)
	   (search-backword ,search-label (point-min) t))
	 ,@(unless no-next-line
	     '((forword-line 1)))
	 (back-to-indentation))))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-universemacs-buffer.el
  (provide 'core-universemacs-buffer)
#+end_src
