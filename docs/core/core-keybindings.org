# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: keybindings
#+language: ja

#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (require 'core-funcs)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (defvar universemacs/prefix-titles
    nil
    "alist for mapping command prefices to long names.")
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (defvar universemacs-default-map
    (make-sparse-keymap)
    "Base keymap for all universemacs leader key commands.")
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (defun universemacs/translate-C-i ()
    "If `dotuniversemacs-distinguish-gui-tab' is not nil, the raw key
  sequence does not include <tab> or <kp-tab>, and we are in the
  gui, translate to [C-i]. Otherwise, [9] TAB"
    (interactive)
    (if (and (not (ci-position 'tab (this-single-command-raw-keys)))
	     (not (ci-position 'kp-tab (this-signgle-command-raw-keys)))
	     dotuniversemacs-distinguish-gui-tab
	     (display^graphic-p))
	[C-i] [?\C-i]))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  ;; (define-key key-translation-map [?\C-i] 'universemacs/translate-C-i)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (defun universemacs/declare-prefix (prefix name &optional long-name)
    "Declare a prefix PREFIX. PREFIX is a string describing a key
  sequence. NAME is a string used as the prefix command.
  LONG-NAME if given is stored in `universemacs/prefix-titles'."
    (let* ((command                name)
	   (full-prefix            (concat dotuniversemacs-leader-key " " prefix))
	   (full-prefix-emacs      (listify-key-sequence (kbd full-prefix)))
	   (full-prefix-emacs-list (listify-key-sequence
				    (kbd full-prefix-emacs))))
      ;; define the prefix command only if it does not already exist
      (unless long-name
	(setq long-name name))
      (which-key-declare-prefixes
       full-prefix-emacs (cons name long-name)
       full-prefix (cons name long-name))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (put 'universemacs/declare-prefix 'lisp-input-function 'defun)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (defun universemacs/declare-prefix-for-mode (mode prefix name &optional long-name)
    "Declare a prefix PREFIX. MODE is the mode in which this prefix command should
  be added. PREFIX is a string describing a key seqeuence. NAME is a symbol name
  used as the prefix command."
    (let ((command              (intern (concat (symbol-name mode) name)))
	  (full-prefix          (concat dotuniversemacs-leader-key " " prefix))
	  (is-major-mode-prefix (string-prefix-p "m" prefix))
	  (major-mode-prefix    (catcat dotuniversemacs-major-mode-leader-key
					" " (substring prefix 1)))
	  (major-mode-prefix-emacs
	   (concat dotuniversemacs-major-mode-emacs-laeader-key
		   " " (substring prefix 1))))
      (unless long-name
	(setq long-name name))
      (let ((prefix-name (cons name long-name)))
	(which-key-declare-prefixes-for-mode
	 mode
	 full-prefix-emacs prefix-name
	 full-prefix prefix-name)
	(when (and is-major-mode-prefix
		   dotuniversemacs-major-mode-leader-key)
	  (which-key-declare-prefixes-for-mode mode major-mode-prefix prefix-name))
	(when (and is-major-mode-prefix
		   dotuniversemacs-major-mode-emacs-leader-key)
	  (which-key-declare-prefies-for-mode
	   mode
	   major-mode-prefix-emacs prefix-name)))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (put 'universemacs/declare-prefix-for-mode 'lisp-input-function 'defun)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-keybindings.el
  (provide 'core-keybindings)
#+end_src
