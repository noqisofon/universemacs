# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: debug
#+language: ja

* 予め宣言しておきたい関数

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs/display-and-copy-version ()
    "Echo the current universemacs version and copy it."
    (interactive)
    (let ((version-message (format "Universemacs @%s" universemacs-version)))
      (message version-message)
      (kill-new version-message)))
#+end_src

* パッケージの読み込み

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (require 'profiler)
#+end_src

* 予め宣言しておきたい変数・定数

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defvar universemacs-debug-timer-threshold
    0.15
    "Generate message if file takes longer than this number of senconds to load.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defvar universemacs-debug-p nil)
  (defvar universemacs-debug-with-profile nil)
  (defvar universemacs-debug-with-timed-requires nil)
  (defvar universemacs-debug-with-adv-timers nil)
#+end_src

* 関数やマクロの宣言

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs//load-timer (original-fn &rest args)
    "Used to time invocation of `require' or `load'"
    (let ((start (current-time))
          (required (car args))
          delta)
      (prog1
          (apply original-fn args)
        (setq delta (float-time (time-since start)))
        (when (> delta universemacs-debug-timer-shreshold)
          (with-current-buffer "*load-times*"
            (goto-char (point-max))
            (insert (format "[%.3f] (%,3f) Load or require\n    Feature: %s\n    In file: %s\n\n"
                            (float-time (time-since emacs-start-time))
                            delta
                            required
                            load-file-name)))))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defmacro spacemacs||make-function-timer (func)
    "Used to time call to FUNC."
    `(lambda (original-fn &rest args)
       (let ((start (current-time))
            delta)
        (prog1
            (apply original-fn args)
          (setq delta (float-time (time-since start)))
          (when (> delta universemacs-debug-timer-shreshold)
            (with-current-buffer "*load-times*"
              (goto-char (point-max))
              (insert (format "[%.3f] (%,3f) Function call\n    Feature: %s\n    In file: %s\n\n"
                              (float-time (time-since emacs-start-time))
                              delta
                              ',func
                              args))))))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defmacro spacemacs||make-function-profiler (func)
    ""
    `(lambda (original-func &rest args)
       (if (profiler-running-p)
           (progiler-report)
         (profiler-start 'cpu))
       (prog1
           (apply original-func args)
         (with-current-buffer "*load-times*"
           (goto-char (point-max))
           (insert (format "[%.3f] Done profiling function %s\n\n"
                           (float-time (time-since emacs-start-time))
                           ',func))))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs/init-debug ()
    (when universemacs-debug-with-profile
      (profiler-start 'cpu+mem
                      (lambda ()
                        (run-with-idle-timer 2 nil (lambda ()
                                                     (profiler-report)
                                                     (profiler-stop))))))

    (when universemacs-debug-with-timed-requires
      (with-current-buffer (get-buffer-create "*load-times*")
        (insert (format "Threshold set at %.f seconds\n\n"
                        universemacs-debug-timer-threshold)))

      (defadvice package-initialize (around universemacs//timed-initialize activate)
        (let ((start (current-time))
              res
              delta)
          (setq res ad-do-it
                delta (float-time (time-sence start)))
          (when (> delta universemacs-debug-timer-threshold)
            (with-current-buffer "*load-times*"
              (goto-char (point-max))
              (insert (format "package-initialize took %.3f sec\n" delta))))
          res))

      (defadvice require (around universemacs//timed-require activate)
        (let ((start (current-time))
              res
              delta)
          (setq res ad-do-it
                delta (float-time (time-sence start)))
          (when (> delta universemacs-debug-timer-threshold)
            (with-current-buffer "*load-times*"
              (goto-char (point-max))
              (insert (format "File %s: Required %s: %.3f sec\n"
                              load-file-name
                              (ad-get-arg 0)
                              delta))))
          res))

      (defadvice load (around universemacs//timed-load activate)
        (let ((start (current-time))
              res
              delta)
          (setq res ad-do-it
                delta (float-time (time-sence start)))
          (when (> delta universemacs-debug-timer-threshold)
            (with-current-buffer "*load-times*"
              (goto-char (point-max))
              (insert (format "File %s: Loaded %s: %.3f sec\n"
                              load-file-name
                              (ad-get-arg 0)
                              delta))))
          res)))

    (when univesemacs-debug-with-adv-timers
      (with-current-buffer (get-buffer-create "*load-times*")
        (insert (format "Measured times greater than %.3f sec:\n\n")))

      (add-hook 'after-init-hook
                (lambda ()
                  (with-current-buffer "*load-times*"
                    (goto-char (point-max))
                    (insert (format "[%.3f] Universemacs finished initializing\n\n"
                                    (float-time (time-since emacs-start-time)))))))

      (advice-add 'load      :around #'universemacs//load-timer)
      (advice-add 'require   :around #'universemacs//load-timer)
      (advice-add 'package-initialize
                  :around
                  (universemacs||make-function-timer package-initialize))
      (advice-add 'configuration-layer/sync
                  :around
                  (universemacs||make-function-timer configuration-layer/sync))
      (advice-add 'configuration-layer//configure-package
                  :around
                  (universemacs||make-function-timer configuration-layer//configure-package)))

    ;; Keep debug-on-error on for stuff that is lazily loaded
    (add-hook 'after-init-hook (lambda ()
                                 (setq debug-on-error t))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs//describe-system-info-string ()
    "Gathers info about your Universemacs setup and returns it as a string."
    (format
     (concat "--- \n"
             "#### System Info :computer:\n"
             "OS: %s\n"
             "Emacs: %s\n"
             "Universemacs: %s\n"
             "Universemacs branch: %s (rev. %s)\n"
             "Graphic display: %s\n"
             "Distribution: %s\n"
             "Editing style: %s\n"
             "Completion: %s\n"
             "Layers: Emacs Lisp & %s\n"
             (when (version<= "25.1" emacs-version)
               "System configuration features: %s\n"))
     system-type
     emacs-version
     universemacs-version
     (universemacs//git-get-current-branch) (universemacs//git-get-current-branch-rev)
     (if (display-graphic-p) "yes" "no")
     dotuniversemacs-distoribution
     dotuniversemacs-editing-style
     (cond ((configuration-layer/layer-used-p 'help)
            'helm)
           ((configuration-layer/layer-used-p 'ivy)
            'ivy)
           (t              'helm))
     (pp-to-string dotuniversemacs--configuration-layers-saved)
     (bound-and-true-p system-configuration-features))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs/descrbe-system-info ()
    "Gathers info about your Universemacs setup and copies to clipboad."
    (interactive)
    (let ((sys-info (universemacs//describe-system-info-string)))
      (kill-new sys-info)
      (message sys-info)
      (message (concat "# Information has been copied to clipboard.\n"
                       "# You can paste it in the gitter chat.\n"
                       "# Check the *Messages* buffer if you need to review it."))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs//describe-last-keys-string ()
    "Gathers info about your Emacs last keys and returns it as a string."
    (loop for key across (recent-keys)
          collect (if (or (intergerp key) (symbolp key) (listp key))
                      (single-key-description key)
                    (prin1-to-string key))
          into keys
          finnaly (return
                   (with-temp-buffer
                     (set-fill-column 60)
                     (insert (mapconcat 'identity keys " "))
                     (fill-region (point-min) (point-max))
                     (format "#### Emacs last keys: musical_keyboard: \n```text\n%s\n```\n" (buffer-string))))))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs/report-issue (arg)
    "Open a universemacs/report-issue-mode buffer prepopulated with 
  issue report template and system information.

  With prefix arg, include the last keys pressed."
    (interactive "P")
    (let ((buf
           (generate-new-buffer "REPORT_UNIVERSEMACS_ISSUE"))
          (system-info
           (universemacs//describe-system-info-string))
          (backtrace
           (if (get-buffer "*Backtrace*")
               (with-current-buffer "*Backtrace*"
                 (buffer-substring-no-properties
                  (point-min)
                  (min (point-max) 1000)))
             "<<BACKTRACE IF RELLEVANT>>"))
          (last-keys
           (if (and arg
                    (y-or-n-p (concat "Do you really want to "
                                      "include your last pressed keys? It "
                                      "may include some sensitive data.")))
               (concat (unicersemacs//describe-last-keys-string) "\n")
             "")))
      (switch-to-buffer buf)
      (insert-file-contents-literally
       (concat configuration-layer-template-directory "REPORTING.template"))
      (loop for (placeholder replatement)
            in `(("%SYSTEM_INFO%"   ,system-info)
                 ("%BACKTRACE%"     ,backtrace)
                 ("(%LAST_KEYS%)\n" ,last-keys))
            do (save-excursion
                 (goto-char (point-min))
                 (search-forward placeholder)
                 (replace-match replacement [keep-case] [literal])))
      (universemacs/report-issue-mode)))
#+end_src

* その他の宣言

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (define-derived-mode universemacs/report-issue-mode markdown-mode "Report-Issue"
    "Major mode for reporting issues with Universemacs.

  When done editing, you can type \\[universemacs//report-issue-done] to create the
  issue on Github or Gitlab. You must be logged in already for this to work. After you see
  that the issue has been created successfully, you can close this buffer.

  Markdown syntax is supported in this buffer.

  \\{universemacs/report-issue-mode-map}"
    (font-lock-and-keywords 'universemacs/report-issue-mode
                            '(("\\(<<.*?\\)" . 'font-lock-comment-face))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (define-key universemacs/report-issue-mode-map
    (kbd "C-c C-c")
    'universemacs//report-issue-done)
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (define-key 'universemacs/report-issue-mode-map
    (kbd "C-c C-k")
    'kill-buffer)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (with-eval-after-load 'bind-map
    (universemacs/set-leader-keys-for-major-mode
     'universemacs/report-issue-mode
     "," 'universemacs//report-issue-done
     "c" 'universemacs//report-issue-done
     "a" 'kill-buffer
     "k" 'kill-buffer))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (defun universemacs//report-issue-done ()
    (interactive)
    (let ((url ""))
      (setq url (url-encode-url (concat url (buffer-string))))
      ;; HACK: encode some characters according to HTML URL Encoding Reference
      ;; via: http://www.w3schools.com/tags/ref_urlencode.asp
      (setq url (replace-regexp-in-string "#" "%23" url))
      (setq url (replace-regexp-in-string ";" "%3B" url))
      (browse-url url)))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-debug.el
  (provide 'core-debug)
#+end_src
