# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: funcs
#+language: ja

* 変数

#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defvar configuration-layer-protected-packages)
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defvar docuniversemacs-filepath)
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defvar universemacs-repl-list
    '()
    "List of registered REPLs.")
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defvar universemacs--init-redisplay-count
    0
    "The number of calls to `redisplay'")
#+end_src

* 関数


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs/system-is-mac ()
    (eq system-type 'darwin))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs/system-is-linux ()
    (eq system-type 'gnu/linux))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs/system-is-mswindows ()
    (eq system-type 'windows-nt))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs/window-system-is-mac ()
    (memq (window-system) '(mac ns)))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs/window-system-is-linux ()
    (memq (window-system) 'x))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs/window-system-is-mswindows ()
    (memq (window-system) '(w32)))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs//redisplay ()
    "`redisplay' wrapper"
    (setq universemacs--init-redisplay-count (1+ universemacs--init-redisplay-count))
    (redisplay))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (defun universemacs/mplist-remove (plist prop)
    "Return a copy of a modified PLIST without PROP and its values.

  If there are multiple properties with the same keyword, only the first property
  and its values are removed."
    (let ((tail plist)
	  result)
      (while (and (consp tail) (not (eq prop (car tail))))
	(push (pop tail) result))
      (when (eq prop (car tail))
	(pop tail)
	(while (and (consp tail) (not (keywordp (car tail))))
	  (pop tail)))
      (while (consp tail)
	(push (pop tail) result))
      (nreverse result)))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-funcs.el
  (provide 'core-funcs)
#+end_src
