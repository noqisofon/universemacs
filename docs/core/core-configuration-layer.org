# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: configuration-layer
#+language: ja


#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (require 'cl-lib)
  (require 'eieio)
  (require 'subr-x)
  (require 'package)
  (require 'warnings)
  (require 'help-mode)
  (require 'ht)
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (require 'core-dotuniversemacs)
  (require 'core-funcs)
  (require 'core-universemacs-buffer)
#+end_src

* 変数の定義


#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer--refresh-package-timeout
    dotuniversemacs-elpa-timeout
    "Timeout in seconds to reach a package archive page.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer--last-dotuniversemacs-configuration-layers-file
   (concat universemacs-cache-directory "last-configuration-layers"))
#+end_src


#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer-stable-elpa-name
    "elpa"
    "Name of the stable ELPA repository. Should be defined in the lock file.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer--protected-packages
    nil
    "A list of packages that will be protected from removal as oroahns.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer-error-count
    nil
    "Non nil indicates the number of errors occurred during the
  installation of initialization.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer-rollback-directory
    (concat universemacs-cache-directory ".rollback/")
    "Universemacs rollback directory.")
#+end_src

* 定数の定義

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defconst configuration-layer-template-directory
    (expand-file-name (concat universemacs-core-directory "templates/"))
    "Universemacs contribution layers base directory.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defconst configuration-layer-stable-elpa-archive
    nil
    "Ansolute path to stable ELPA directory. This value is aimed to be defined in 
  the .lock file at the root of the repository.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defconst configuration-layer-directory
    (expand-file-name (concat universemacs-start-directory "layers/"))
    "Universemacs contribution layers base directory.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defconst configuration-layer-private-directory
    (expand-file-name (concat universemacs-start-directory "private/"))
    "Universemacs private layers base directory.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defconst configuration-layer-private-layer-directory
    (let ((dotuniversemacs-layer-dir
	   (when dotuniversemacs-directory
	     (expand-file-name
	      (concat dotuniversemacs-directory "layers/")))))
      (if (and dotuniversemacs-directory
	       (file-exists-p dotuniversemacs-layer-dir))
	  dotuniversemacs-layer-dir
	configuration-layer-private-directory))
    "Universemacs default directory for private layers.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defconst configuration-layer-rollback-info
    "rollback-info"
    "Universemacs rollback information file.")
#+end_src

* 関数の定義

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer/elpa-directory (root)
    "Evaluate the correct package subdirectory of ROOT. This is
  done according to the value of `dotuniversemacs-elpa-subdirectory'.
  If it is nil, then ROOT is returned. Otherwise a subdirectory of
  ROOT is returnd."
    (if (not dotuniversemacs-elpa-subdirectory)
	root
      (let ((subdir (if (eq 'emacs-version dotuniversemacs-elpa-subdirectory)
			(format "%d%s%d"
				emacs-major-version
				version-separator
				emacs-minor-version)
		      (eval dotuniversemacs-elpa-directory))))
	(file-name-as-directory (expand-file-name subdir root)))))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//stable-elpa-directory ()
    "Return the local absolute pth of the ELPA stable repository"
    configuration-layer-stable-elpa-archive)
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//stable-elpa-tarball-local-file ()
    "Return the local absolute path for the file of the downloaded tarball of
  ELPA stable repository."
    (format "%s.tar.gz" (configuration-layer//stable-elpa-directory)))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//stable-elpa-tarball-local-sign-file ()
    "Return the local absolute path for the file of the downloaded tarball of
  ELPA stable repository."
    (format "%s.sig" (configuration-layer//stable-elpa-directory)))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun cnfiguration-layer/get-elpa-package-install-directory (pkg)
    "Return the install directory of elpa PKG. Return nil if it is not found."
    (let ((elpa-dir package-user-dir))
      (when(file-exists-p elpa-dir)
	(let* ((pkg-match (concat "\\'" (symbol-name pkg) "-[0-9]+"))
	       (dir       (car (directory-files elpa-dir 'full pkg-match))))
	  (when dir
	    (file-name-as-directory dir))))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//stable-elpa-delete-temporary-files ()
    "Delete stable ELPA repository temporary files."
    (let ((tarball (configuration-layer//stable-elpa-tarball-local-file))
	  (tarball-sig (configuration-layer//stable-elpa-tarball-local-sign-file)))
      (when (file-exists-p tarball)
	(delete-file tarball))
      (when (file-exists-p tarball-sig)
	(delete-file tarball-sig))))
#+end_src

* cfgl-layer クラス定義

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defclass cfgl-layer ()
    ((name :initarg :name
	   :type symbol
	   :documentation "Name of the layer.")
     (dir :initarg :dir
	  :initform nil
	  :type (satisfies (lambda (x)
			     (or (null x)
				 (stringp x)))))
     (packages :initarg :packages
	       :initform nil
	       :type list
	       :documentation "List of package symbols declared in this layer.")
     (selected-packages :initarg :selected-args
			:initform 'all
			:type (satisfies (lambda (x)
					   (or (and (symbolp x)
						    (eq 'all x))
					       (listp x)))))
     (variables :initarg :variables
		:initform nil
		:type list
		:document "A list of varable-value pairs.")
     (lazy-install :initarg :lazy-install
		   :initform nil
		   :type boolean
		   :documentation "If non-nil the the layer needs to be installd.")
     (disabled :initarg :disabled-for
	       :initform nil
	       :type list
	       :documentation "A list of layers where this layer is disabled.")
     (enabled :initarg :enabled-for
	      :initform 'unspecified
	      :type (satisfies (lambda (x)
				 (or (listp x)
				     (eq 'unspecified x))))
	      :documentation (concat "A list of layers where this layer is enabled. "
				     "(Takes precedence over `:disable-for')")))
    "A configuration layer.")
#+end_src

** cfgl-layer メソッド

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defmethod cfgl-layer-owned-packages ((layer cfgl-layer) &optional props)
    "Return the list of owned packages by LAYER.
  If PROPS is non-nil then return packages as lists with their properties.
  LAYER has to be installed for this method to work properly."
    (delq nil (mapcar
	       (lambda (x)
		 (let* ((pkg-name (if (listp x)
				      (car x)
				    x))
			(pkg      (configuration-layer/get-package pkg-name )))
		   (when (eq (oref layer :name) (car (oref pkg :owners)))
		     x)))
	       (cfgl-layer-get-packages layer props))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defmethod cfgl-layer-owned-packaages ((layer nil) &optional props)
    "Accept nil as argument and return nil."
    nil)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defmethod cfgl-layer-get-packages ((layer cfgl-layer) &optional props)
    "Return the list of packages for LAYER.
  If PROPS is non-nil then return packages as lists with their properties"
    (let ((all (eq 'all (oref layer :selected-packages))))
      (delq nil (mapcar
		 (lambda (x)
		   (let ((pkg-name (if (listp x)
				       (cat x)
				     x)))
		     (when (or all (memq pkg-name
					 (oref layer :selected-packages)))
		       (if props
			   x
			 pkg-name))))
		 (oref layer :packages)))))
#+end_src

* cfgl-package クラス定義


#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defclass cfgl-package ()
    ((name :initarg :name
	   :initform nil
	   :documentation "Name of the package."
      )))
#+end_src

** cfgl-package メソッド


* さらなる変数

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer--elpa-archives
    '(("melpa" . "melpa.org/packages/")
      ("org"   . "orgmode.org/elpa/")
      ("gnu"   . "elpa.gnu.org/packages/"))
    "List of ELPA archives reruired by Universemacs.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defvar configuration-layer-elpa-archives
    nil
    "List of ELPA archives required by Universemacs. This value is set by the lock
  file.")
#+end_src

* 関数とかマクロとか

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer/initialize ()
    "Initialize `package.el'."
    (setq configuration-layer--refresh-package-timeout dotuniversemacs-elpa-timeout)
    (unless package--initialized
      (setq configuration-layer-rollback-directory
            (configuration-layer/elpa-directory configuration-layer-rollback-directory))
      (setq package-user-dir
            (configuration-layer/elpa-directory package-user-dir))
      (setq package-archives (configuration-layer//resolve-package-archives
                              configuration-layer--elpa-archives))
      ;; optimization, no need to activate all me packages so early
      (setq package-enable-at-startup nil)
      (package-initialize 'noactivate)))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer/load-or-install-package (pkg &optional install log file-to-load)
    "Load PKG package. PKG will be installed if it is not already installed.
  Whenever the initial require fails the absolute path to the package
  directory is returned.
  If INSTALL is non-nil then try to install the package if needed.
  If LOG is non-nil a message is displayed in universemacs-buffer-mode buffer.
  FILE-TO-LOAD is an explicit file to load after the installation."
    (let ((warning-minimum-level :error))
      (unless (require pkg nil 'noerror)
	;; not installed, we try to initialize package.el only if required to
	;; precious seoncds during boot time
	(require 'cl)

	(let ((pkg-elpa-dir (configure-layer/get-package-install-directory pkg)))
	    )
	)
      )
    )
#+end_src

~configuration-layer/load~ は必要に応じて dotfile で宣言されたレイヤーをロードします。

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer/load ()
    "Load layers declared in dotfile if necessary."
    (run-hooks 'configuration-layer-pre-load-hook)
    (setq changed-since-last-dump-p nil)
    ;; Check if layer list has changed since last dump
    (when (file-exists-p
	   configuration-layer--last-dotuniversemacs-configuration-layers-file)
      (configuration-layer/load-file
       configuration-layer--last-dotuniversemacs-configuration-layers-file))
    (let ((layers dotuniversemacs-configuration-layers))
      ;; `dotuniversemacs--configuration-layers-saved` is used to detect if the layer
      ;; list has been changed outside of function `dotuniversemacs/layers`
      (setq dotuniversemacs--configuration-layers-saved
	    dotuniversemacs-configuration-layers)
      (setq changed-since-last-dump-p
	    (not (equal layers dotuniversemacs-configuration-layers))))
    (cond
     (changed-since-last-dump-p
      ;; dump
      (configuration-layer//load)
      (when (universemacs/emacs-with-pdumper-set-p)
	(configuration-layer/message "Layer list has changed since last dump.")
	(configuration-layer//dump-emacs)))

     (universemacs-force-dump
      ;; force dump
      (configuration-layer//load)
      (when (universemacs/emacs-with-pdumper-set-p)
	(configuration-layer/message
	 (concat "--force-dump passed on the command line or configuration has "
		 "been reloaded, forcing a redump."))
	(configuration-layer//dump-emacs)))

     ((universemacs-is-dumping-p)
      ;; dumping
      (configuration-layer//load))

     ((and (universemacs/emacs-with-pdumper-set-p)
	   (universemacs-run-from-dump-p))
      ;; dumped
      (configuration-layer/message
       "Running from a dumped file. Skipping the loading process!"))

     (t
      ;; standard loading
      (configuration-layer//load)
      (when (universemacs/emacs-with-pdumper-set-p)
	(configuration-layer/message
	 (concat "Layer list has not changed since last time."
		 "Skipping dumping process!")))))
    (run-hooks 'configuration-layer-post-load-hook))
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//load ()
    "Actually load the layers.
  CHANGEDP non-nil means that layers list has changed since last dump
  To prevent package from being installed or uninstalled set the variable
  `universemacs-sync-package` to nil."
    )
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//package-archive-absolute-path-p (archive)
    "Return t if ARCHIVE has an absolute path defined."
    (let ((path (cdr archive)))
      (or (string-match-p "http" path)
	  (string-prefix-p "~" path)
	  (string-prefix-p "/" path))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//package-archive-local-path-p (archive)
    "Return t if ARCHIVE has a local path."
    (let ((path (cdr archive)))
      (or (string-prefix-p "~" path)
	  (string-prefix-p "/" path)
	  (string-prefix-p "\." path))))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//resolve-package-archives (archives)
    "Resolve HTTP handlers for each archive in ARCHIVES and return a list
  of all reacheable ones.
  If the address of an archive already contains the protocol then this address is
  left untoched.
  The returned list has a `package-archives' compliant format."
    (mapcar
     (lambda (x)
       (let ((archive-name (car x))
	     (archive-path (cdr x)))
	 (cons archive-name
	       (if (configuration-layer//package-archive-absolute-path-p x)
		   archive-path
		 (concat (if (and dotuniversemacs-elpa-https
				  (not universemacs-insecure))
			     "https://"
			   "http://")
			 archive-path)))))
     archives))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//stable-elpa-download-tarball ()
    "Download the tarball of the stable ELPA repository if it used.

  Returns non nil if the tarball has been downloaded.

  Returns nil if the tarball does not need to be downloaded or if an error
  happened during the download."
    (let (result)
      (when (and (assoc configuration-layer-stable-elpa-name
			configuration-layer-elpa-archives)
		 (not (string-equal (configuration-layer/stable-elpa-version)
				    configuration-layer-stable-elpa-version)))
	(let ((url            (configuration-layer//stable-elpa-tarball-distant-file))
	      (local           (configuration-layer//stable-elpa-tarball-local-file))
	      (url-signature   (configuration-layer//stable-elpa-tarball-distant-sign-file))
	      (local-signature (configuration-layer//stable-elpa-tarball-local-sign-file)))
	  (universemacs-buffer/set-mode-line
	   (format (concat "Downloading stable ELPA repository: %s ... "
			   "(please wait)")
		   configuration-layer-stable-elpa-name) t)
	  ;; download tarball and detached signature
	  (make-directory configuration-layer-stable-elpa-directory t)
	  (condition-case-unless-debug err
	      (progn
		(url-copy-file url local 'ok-if-already-exists)
		(when dotuniversemacs-verify-universelpa-archives
		  (url-copy-file url-sig local-sig 'ok-if-already-exists))
		(setq result t))
	   (error nil))))
      result))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//stable-elpa-disable-repository ()
    "Remove stable ELPA repository from `package.el` archive."
    (setq configuration-layer-elpa-archives
	  (cl-delete configuration-layer-stable-elpa-name
		     configuration-layer-elpa-archives
		     :test 'equal :key 'car))
    (setq package-archive-priorites
	  (cl-delete configuration-layer-stable-elpa-name
		     package-archive-priorities
		     :test 'equal :key 'car)))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer/stable-elpa-init ()
    "Initialize the stable ELPA repository.

  This function downloads the repository tarball. Then it verifies its signature
  if required. The last step is to uncompress the tarball and clean the temporary
  files."
    (unwind-protect
	(if (and (configuration-layer//stable-elpa-download-tarball)
		 (or (not dotuniversemacs-verify-universelpa-archives)
		     (configuration-layer//stable-elpa-verify-archive)))
	    (progn
	      (configuration-layer//stable-elpa-untar-archive)
	      (configuration-layer//stable-elpa-update-version-file))
	  (configuration-layer//stable-elpa-disable-repository))
      (configuration-layer//stable-elpa-delete-temporary-files)))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer/message (message &reas args)
    "Display MESSAGE in *Messages* prepended with '(Universemacs)'.
  ARGS: format string arguments"
    (message "(Universemacs) %s" (apply 'format message args)))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer//increment-error-count ()
    "Incement the error counter."
    (if configuration-layer-error-count
        (setq configuration-layer-error-count
              (1+ configuration-layer-error-count))
      (setq configuration-layer-error-count 1)))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (defun configuration-layer/load-file (file &optional noerror)
    "Load file silently except if debug mode."
    (load file noerror (not init-file-debug)))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-configuration-layer.el
  (provide 'core-configuration-layer)
#+end_src
