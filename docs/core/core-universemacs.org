# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: universemacs
#+language: ja

* 予め宣言しておきたい変数、または定数

** 予め宣言しておきたい変数

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (setq message-log-max 16384)
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (defvar dotuniversemacs-startup-buffer-responsive
    t
    "True if the home buffer should respond to resize events.")
#+end_src

** 予め宣言しておきたい定数

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (defconst emacs-start-time (current-time))
#+end_src

* パッケージの読み込み

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (require 'subr-x nil 'noerror)
  (require 'page-break-lines)
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (require 'core-debug)
  (require 'core-command-line)
  (require 'core-dotuniversemacs)
  (require 'core-release-management)
  (require 'core-auto-completion)
  (require 'core-jump)
  (require 'core-display-init)
  (require 'core-themes-support)
  (require 'core-fonts-support)
  (require 'core-universemacs-buffer)
  (require 'core-keybindings)
  (require 'core-toggle)
  (require 'core-micro-state)
  (require 'core-transient-state)
  (require 'core-use-package-ext)
#+end_src

* グループの宣言

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (defgroup universemacs nil
    "Universemacs consomizations."
    :group 'starter-kit
    :prefix 'universemacs-)
#+end_src

* プログレス・バー用？変数

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  ;; loading progress bar variables
  (defvar universemacs-loading-char    ?█)
  (defvar universemacs-loading-string  "")
  (defvar universemacs-loading-counter 0)
  (defvar universemacs-loading-value   0)

  (defvar universemacs-loading-dots-chunk-count 3)
  (defvar universemacs-loading-dots-count (window-total-size nil 'width))
  (defvar universemacs-loading-dots-chunk-size
        (/ universemacs-loading-dots-count universemacs-loading-dots-chunk-count))
  (defvar universemacs-loading-dots-chunk-threshold 0)
#+end_src

* フックの宣言

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (defvar universemacs-post-user-config-hook
    nil
    "Hook run after `dotuniversemacs/user-config'.")
#+end_src

#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (defvar universemacs-post-user-config-hook-run
    nil
    "Whethe `universemacs-post-user-config-hook' has been run.")
#+end_src

* 関数の定義
  
#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (defun universemacs/init ()
    "Perform startup initialization."
    (when universemacs-debug-p
      (universemacs/init-debug))
    ;; silence ad-handle-definition about advised function getting redefined
    (setq ad-redefinition-action 'accept)

    (prefer-coding-system 'utf-8)

    (dotuniversemacs/load-file)

    (require 'core-configuration-layer)

    (dotuniversemacs|call-func dotuniversemacs/init "Calling dotfile init...")
    (when dotuniversemacs-maximized-at-startup
      (unless (frame-parameter nil 'fullscreen)
        (toggle-frame-maximized))
      (add-to-list 'default-frame-alist '(fullscreen . miximized)))

    (dotuniversemacs|call-func dotuniversemacs/user-init "Calling dotfile user init...")
    (setq dotuniversemacs-editing-style
          (dotuniversemacs//read-editing-style-config dotuniversemacs-editing-style))

    (configuration-layer/initialize)
    ;; Apply theme
    (let ((default-theme (car dotuniversemacs-themes)))
      (condition-case err
          (universemacs/load-theme default-theme nil)
        ('error
         ;; fallback on Universemacs default theme
         (setq universemacs--default-user-theme default-theme)
         (setq dotuniversemacs-themes (delq universemacs--fallback-theme
                                            dotuniversemacs-themes))
         (add-to-list 'dotuniversemacs-themes universemacs--fallback-theme)
         (setq default-theme universemacs--fallback-theme)
         (load-theme universemacs--fallback-theme t)))
      (setq configuration-layer--protected-packages
            (append
             (delq nil (mapcar 'universemacs//get-theme-package
                               dotuniversemacs-themes))
             configuration-layer--protected-packages))
      (setq-default universemacs--current-theme default-theme)
      (setq-default universemacs--cycle-themes (cdr dotuniversemacs-themes)))

    ;; font
    (universemacs|do-after-display-system-init
     ;; If you are thinking to remove this call to `message', think twice. You'll
     ;; break the life of several Universemacser using Emacs in daemon mode. Without
     ;; this, their chosen font-will not be set on the *first* instance of
     ;; emacsclient, at least if different than theie system font. You don't
     ;; believe me? Go ahead, try it. After you'll have notice that this was true,
     ;; increase the counter bello so next people will give it more confidenve.
     ;; Counter = 1
     (message "Setting the font...")
     (unless (universemacs/set-default-font dotuniversemacs-default-font)
       (universemacs-buffer/warning
        "Cannot find any of the specified fonts (%s)! Font setting may not be correct."
        (if (listp (car dotuniversemacs-default-font))
            (mapconcat 'car dotuniversemacs-default-font ", ")
          ;; else
          (car dotuniversemacs-default-font)))))

    ;; universemacs init
    (setq inhibit-startup-screen t)
    (universemacs-buffer/goto-buffer)
    (unless (display-graphic-p)
      ;; explicitly recreate the home buffer for the first GUI client
      ;; in order to cirrectly display the logo
      (universemacs|do-after-display-system-init
       (kill-buffer (get-buffer universemacs-buffer-name))
       (universemacs-buffer/goto-buffer)))
    ;; This is set to nill during startup to allow Universemacs to show buffers opened
    ;; as command line arguments.
    (setq initial-buffer-choice nil)
    (setq inhibit-startup-screen t)
    (require 'core-keybindings)

    ;; for convenience and user support
    (unless (fboundp 'tool-bar-mode)
      (universemacs-buffer/message (concat "No graphical support detected, "
                                           "You won't be able to launch a "
                                           "graphical instance of Emacs "
                                           "with this build.")))
    ;; check for new version
    (if dotuniversemacs-mode-line-unicode-symbols
        (setq-default universemacs-version-check-light "[⇪]"))
    ;; install the dotfile if required
    (dotuniversemacs/maybe-install-dotfile)

    )
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (defun universemacs/setup-startup-hook ()
    "Add post init processing.
  Note: the hooked function is not executed when in dumed mode."
    (add-hook
     'emacs-startup-hook
     (defun universemacs/startup-hook ()

       (setq initial-buffer-choice (lambda () (get-buffer universemacs-buffer-name)))

       ;; (winner-mode t)

       (dotuniversemacs|call-func dotuniversemacs/user-config
				  "Calling dotfile user config ...")
       (dotuniversemacs|call-func dotuniversemacs/emacs-custom-settings
				  "Calling dotfile Emacs custom settings ...")

       (universemacs/initialize-custom-file-sync)
       (run-hooks 'universemacs-post-user-config-hook)
       (setq universemacs-post-user-config-hook-run t)
       (when (fboundp dotuniversemacs-scratch-mode)
	 (with-current-buffer "*scratch*"
	   (funcall dotuniversemacs-scratch-mode)
	   (run-hooks 'dotuniversemacs-scratch-mode-hook)))
       (when universemacs--delayed-user-theme
	 (universemacs/load-theme universemacs--delayed-user-theme
				  universemacs--fallback-theme t))
       (configuration-layer/display-summary emacs-start-time)
       (universemacs-buffer//startup-hook)
       (universemacs/check-for-new-version nil universemacs-version-check-interval)
       (setq universemacs-initialized t)
       (setq gc-cons-threshold (car dotuniversemacs-gc-cons)
	     gc-cons-percentage (cadr dotuniversemacs-gc-cons))
       (unless (version< emacs-version "27")
	 (setq read-process-output-max dotuniversemacs-read-process-output-max))))

    (let ((default-directory universemacs-start-directory))
      (if dotuniversemacs-byte-compile
	  (universemacs//ensure-byte-compilation universemacs--compiled-files)
	(universemacs//remove-byte-compiled-files-in-dir universemacs-core-dorectory)))
    ;; Check if revision has changed.
    (universemacs//revision-check))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-universemacs.el
  (provide 'core-universemacs)
#+end_src

