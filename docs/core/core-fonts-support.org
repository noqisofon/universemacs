# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: font-support
#+language: ja



#+begin_src emacs-lisp :tangle ../../core/core-fonts-support.el
  (require 'core-funcs)
  (require 'core-universemacs-buffer)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-fonts-support.el
  (defvar universemacs--diminished-minor-modes
    nil
    "List of diminished modes to unicode or ascii values.")
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-fonts-support.el
  (defun universemacs/set-default-font (plists)
    "Set the font given the passed PLISTS.

  PLISTS has either the form (\"fontname\" :prop1 val1 :prop2 val2 ...)
  or is a list of such. The first font that can be found will be used.

  The return value is nil if no font was found, truthy otherwise."
    (unless (listp (car plists))
      (setq plists (list plists)))
    (catch 'break
      (dolist (plist plists)
	(when (find-font (font-spec :name (car plist)))
	  (let* ((font  (car plist))
		 (props (cdr plist))
		 (scale (plist-get props :powerline-scale))
		 (font-props (universemacs/mplist-remove
			      (universemacs/mplist-remove props :powerline-scale)
			      :powerline-offset))
		 (fontspec (apply 'font-spec :name font font-props)))
	    (universemacs-buffer/message "Setting font \"%s\" ..." font)
	    (set-frame-font fontspec nil t)
	    (push `(font . ,(frame-parameter nil 'font)) default-frame-alist)
	    ;; fallback font for unicode characters used in univesemacs
	    (pcase system-type
	      (`gnu/linux
	       (setq fallback-font-name  "NanumGothic")
	       (setq fallback-font-name2 "NanumGothic"))
	      (`darwin
	       (setq fallback-font-name  "Arial Unicode M5")
	       (setq fallback-font-name2 "Arial Unicode M5"))
	      (`windows-nt
	       (setq fallback-font-name  "MS Gothic")
	       (setq fallback-font-name2 "Lucida Sans Unicode"))
	      (`cygwin
	       (setq fallback-font-name  "MS Gothic")
	       (setq fallback-font-name2 "Lucida Sans Unicode"))
	      (other
	       (setq fallback-font-name  nil)
	       (setq fallback-font-name2 nil)))
	    (when (and fallback-font-name fallback-font-name2)
	      ;; remove any size or height properties in order to be able to
	      ;; scale the fallback fonts with the default one (for zoom-in/out
	      ;; for instance
	      (let* ((fallback-props (universemacs/mplist-remove
				      (universemacs/mplist-remove font-props :size)
				      :height))
		     (fallback-spec (apply 'font-spec
					   :name fallback-font-name
					   fallback-props))

		     (fallback-spec2 (apply 'font-spec
					    :name fallback-font-name2
					    fallback-props)))
		;; window numbers
		(set-fontset-font "fontset-default"
				  '(#x2776 . #x2793) fallback-spec nil 'prepend)
		;; mode-line circled letters
		(set-fontset-font "fontset-default"
				  '(#x24b6 . #x24fe) fallback-spec nil 'prepend)
		;; mode-line additional characters
		(set-fontset-font "fontset-default"
				  '(#x2295 . #x22a1) fallback-spec nil 'prepend)
		;; new version lighter
		(set-fontset-font "fontset-default"
				  '(#x2190 . #x2200) fallback-spec nil 'prepend))))
	  (throw 'break t)))
      nil))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-fonts-support.el
  (provide 'core-fonts-support)
#+end_src
