# -*- coding: utf-8; -*-
#+title: Universemacs :: core :: toggle
#+language: ja

#+begin_src emacs-lisp :tangle ../../core/core-toggle.el
  (require 'core-funcs)
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-toggle.el
  (defvar universemacs-toggles
    '()
    "List of all declared toggles. The structure of an element is a
  property list (name :func FUNCTION :doc STRING :key STRING).")
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-toggle.el
  (defmacro universemacs|add-toggle (name &rest props)
    "Add a toggle with NAME symbol.



  All properties supported by `universemacs//create-key-binsing-form' can be
  used."
    (declare (indent 1))
    (let* ((wrapper-func        (intern (format "universemacs/toggle-%s"
					 (symbol-name name))))
	   (wrapper-func-status (intern (format "%s-p" wrapper-func)))
	   (wrapper-func-on     (intern (format "%s-on" wrapper-func)))
	   (wrapper-func-off    (intern (format "%s-off" wrapper-func)))
	   (mode                (plist-get props :mode))
	   (status              (or mode (plist-get props :status)))
	   (condition           (plist-get props :if))
	   (doc                 (plist-get props :documentation))
	   (on-body             (if mode
				    `((,mode) (universemacs/mplist-get props :on))))
	   (off-body            (if mode
				    `((,mode -1) (universemacs/mplist-get props :on))))
	   (prefix-arg-var      (plist-get props :prefix))
	   (on-message          (plist-get props :on-message))
	   (bindkeys            (universemacs//create-key-binding-form props wrapper-func))
	   ;; we evaluate condition and status only if the are a list or
	   ;; a bound symbol
	   (status-eval         '(and (or (and (symbolp ',status)
					       (boundp ',status))
					  (listp ',status))
				      ',status)))
      `(progn
	 (push (append '(,name) '(:function ,wrapper-func
					    :preficate
					    ,wrapper-func-status)
		       ',props)
	       uniersemacs-toggles)
	 ;; toggle function
	 (defun ,wrapper-func ,(if prefix-arg-var
				   (list prefix-arg-var)
				 ())
	   ,(format "Toggle %s on and off."  (symbol-name name))
	   ,(if prefix-arg-var
		'(interactive "P")
	      '(interactive))
	   (if (or (null ',confition)
		   (and (or (and (symbolp ',condition)
				 (boundp ',condition))
			    (listp ',condition))
			,condition))
	       (if (,wrapper-func-status)
		   (progn
		     ,@off-body
		     (when (called-interactively-p 'any)
		       (message ,(format "%s disabled." name))))
		 ,@on-body
		 (when (called-interavtively-p 'any)
		   (message ,(or on-message (format "%s enabled." name)))))
	     (message "This is toggle is not supported.")))
	 ;; predicate function
	 (defun ,wrapper-func-status ()
	   ,(format "Check if %s is on." (symbol-name name))
	   ,status-eval)
	 ;; Only define on- or off-functions when status is available
	 ,@(when status
	     `(
	       ;; on-function
	       (defun ,wrapper-func-on ()
		 ,(format "Toggle %s on." (symbol-name name))
		 (interactive)
		 (unless (,wrapper-func-status)
		   (,wrapper-func)))
	       ;; off-function
	       (defuc wrapper-func-off ()
		 ,(format "Toggle %s off." (symbol-name name))
		 (interactive)
		 (when (,wrapper-func-status)
		   (,wrapper-func)))))
	 ,@bindkeys)))
#+end_src



#+begin_src emacs-lisp :tangle ../../core/core-toggle.el
  (provide 'core-toggle)
#+end_src
